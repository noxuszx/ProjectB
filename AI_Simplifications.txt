## Potential Simplifications in AI System PHASE 1

### 1. Fleeing Behavior - Simplify Distance Calculations

**Current:**
- Checks threat distance every frame.
- Uses a complex condition for stopping.

**Simplification:**
- Use only time-based fleeing.
```lua
-- Simplified stopping condition
if timeElapsed >= self.fleeDuration then
    self:stopFleeing(creature, "time expired")
    return
end
```

### 2. Roaming Behavior - Simplify Target Selection

**Current:**
- Attempts 5 different random targets.
- Chooses the farthest valid one.

**Simplification:**
- Use one random destination.

```lua
-- Simple random target selection
local randomAngle = math.random() * math.pi * 2
local randomDistance = math.random() * roamRadius
local targetX = centerPosition.X + math.cos(randomAngle) * randomDistance
local targetZ = centerPosition.Z + math.sin(randomAngle) * randomDistance
self.targetPosition = Vector3.new(targetX, centerPosition.Y, targetZ)
```

### 3. MoveTo Function - (If Unused)

**Current:**
- Handles ground snapping with raycasts.

**Simplification:**
- Remove `snapToGround` if Humanoid:MoveTo adequately handles it.

### 4. Unused Variables - Clean Up

**Target Code:**
- `self.lastPosition`, `self.stuckCheckTime`, `self.lastStuckTime`, `self.stuckAttempts`.

**Simplification:**
- Remove unused variables for clarity.


------------------------------------------------------------------------------------------
>>                                                                                      <<
------------------------------------------------------------------------------------------


## AI Spawning System Simplifications PHASE 2

### 5. Complex Time-Based Spawning

**Current:**
- Uses day/night cycle checks for each creature type.
- `shouldSpawnBasedOnTime` function with period validation.

**Simplification:**
- Remove time-based spawning if most creatures spawn both day and night.
- Use simple random spawning without time checks.
```lua
-- Simplified approach: remove time validation entirely
local creaturesToSpawn = performCreatureRoll(spawnConfig)
```

### 6. Complex Noise-Based Spawner Placement

**Current:**
- Uses noise for temperature, humidity, and hostility calculations.
- Complex biome classification with multiple rules.

**Simplification:**
- Use random-based spawner placement instead of noise.
```lua
-- Simple random spawner type selection
local function getSpawnType(chunkX, chunkZ)
    local randomValue = math.random()
    return randomValue < 0.7 and "Safe" or "Dangerous"
end
```

### 7. Multiple Scatter Attempts

**Current:**
- Uses `MaxScatterAttempts` (15 attempts) for creature positioning.
- Complex distance validation between spawn positions.

**Simplification:**
- Reduce to 3-5 attempts maximum.
- Simplify distance checking.
```lua
-- Reduced attempts for better performance
local maxAttempts = 3
for attempt = 1, maxAttempts do
    -- Simple positioning logic
end
```

### 8. Complex Spawner Validation

**Current:**
- Multiple validation layers: spacing, village proximity, ground detection.
- Multiple raycast operations per spawner.

**Simplification:**
- Use single validation check (ground detection only).
- Remove village proximity checks if not gameplay-critical.
```lua
-- Simplified validation
local function findValidSpawnerPosition(chunkX, chunkZ)
    -- Single raycast for ground detection
    -- Skip complex spacing/village checks
end
```
